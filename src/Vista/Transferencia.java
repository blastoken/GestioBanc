/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import Modelo.*;
import java.io.IOException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author joshu
 */
public class Transferencia extends javax.swing.JFrame {

    /**
     * Creates new form Transferencia
     */
    
    Sucursal s;
    Cliente c;
    int nc;
    DefaultTableModel modelTaula;
    public Transferencia() {
        initComponents();
        this.jButton1.setToolTipText("Realizar Transférencia");
    }
    
    public Transferencia(Sucursal suc, Cliente cl, int numC){
        initComponents();
        this.jButton1.setToolTipText("Realizar Transférencia");
        this.s = suc;
        this.c = cl;
        this.nc = numC;
        this.modelTaula = new DefaultTableModel();
        this.modelTaula.addColumn("Nº Cuenta");
        this.modelTaula.addColumn("Tipo");
        this.modelTaula.addColumn("Saldo");
        this.modelTaula.addColumn("Puntos");
        this.jTable1.setModel(this.modelTaula);
        this.jLabel1.setText("Clientes sucursal Nº "+this.s.getCod());
        cargarClientes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/transferir-dinero.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Cantidad a transferir");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 154, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBox1, 0, 209, Short.MAX_VALUE))
                        .addGap(114, 114, 114)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                            .addComponent(jTextField1))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)))
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void actualitzar(){
        this.modelTaula = new DefaultTableModel();
        this.modelTaula.addColumn("Nº Cuenta");
        this.modelTaula.addColumn("Tipo");
        this.modelTaula.addColumn("Saldo");
        this.modelTaula.addColumn("Puntos");
        this.jTable1.setModel(this.modelTaula);
    }
    
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        //Llenar tabla
        Cliente cl;
        CuentaCorriente cc;
        CuentaVivienda cv;
        FondoInversion fi;
        Vector info;
        actualitzar();
        if (this.jComboBox1.getSelectedItem() != null) {
            if(!this.jComboBox1.getSelectedItem().toString().equals("- Selecciona cliente -")){
            cl = this.s.buscarCliente(this.jComboBox1.getSelectedItem().toString().split(" - ")[0]);
            this.jLabel2.setText("Cuentas de "+this.jComboBox1.getSelectedItem().toString().split(" - ")[1]);
            for(int i = 0; i < cl.getCuentas().size(); i++){
                info =  new Vector();
                if(cl.getCuentas().get(i) instanceof CuentaCorriente){
                    cc = (CuentaCorriente) cl.getCuentas().get(i);
                    info.add(cc.getNumCuenta());
                    info.add("Cuenta Corriente");
                    info.add(cc.getSaldo());
                    info.add(cc.getPuntos());
                }else if(cl.getCuentas().get(i) instanceof CuentaVivienda){
                    cv = (CuentaVivienda) cl.getCuentas().get(i);
                    info.add(cv.getNumCuenta());
                    info.add("Cuenta Vivienda");
                    info.add(cv.getSaldo());
                    info.add(cv.getPuntos());
                }else if(cl.getCuentas().get(i) instanceof FondoInversion){
                    fi =  (FondoInversion) cl.getCuentas().get(i);
                    info.add(fi.getNumCuenta());
                    info.add("Fondo Inversión");
                    info.add(fi.getSaldo());
                    info.add(fi.getPuntos());
                }
                modelTaula.addRow(info);
                jTable1.setModel(modelTaula);
            }
            }
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //Realizar transferencia
        Cliente cl;
        CuentaCorriente cc, cc2;
        CuentaVivienda cv, cv2;
        FondoInversion fi, fi2;
        int cantidad;
        int row = this.jTable1.getSelectedRow();
        if(row != -1){
            if(!this.jTextField1.getText().equals("")){
                cantidad = Integer.parseInt(this.jTextField1.getText());
            if(this.c.buscarCuenta(this.nc) instanceof CuentaCorriente){
                cc = (CuentaCorriente) this.c.buscarCuenta(this.nc);
                cl = this.s.buscarCliente(this.jComboBox1.getSelectedItem().toString().split(" - ")[0]);
                String tipo = this.jTable1.getValueAt(row, 1).toString(),numC = this.jTable1.getValueAt(row, 0).toString();
                if(tipo.equals("Cuenta Corriente")){
                    cc2 = (CuentaCorriente) cl.buscarCuenta(Integer.parseInt(numC));
                    cc2.transferencia(cantidad);
                    cc.sacarDinero(cantidad);
                    try {
                        Controlador.GestionBanco.modSaldoCuenta(this.s, cl, cc2.getNumCuenta(), cc2.getSaldo(), cc2.getPuntos());
                        Controlador.GestionBanco.modSaldoCuenta(this.s, this.c, cc.getNumCuenta(), cc.getSaldo(), cc.getPuntos());
                        Controlador.GestionBanco.guardarAccion(this.s, cl, cc2.getNumCuenta(), "TRANSFERENCIA", "+"+cantidad);
                        Controlador.GestionBanco.guardarAccion(this.s, this.c, cc.getNumCuenta(), "TRANSFERENCIA", "-"+cantidad);
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(this,"No se ha podido realizar la transferencia");
                    }
                }else if(tipo.equals("Cuenta Vivienda")){
                    cv2 = (CuentaVivienda) cl.buscarCuenta(Integer.parseInt(numC));
                    cv2.transferencia(cantidad);
                    cc.sacarDinero(cantidad);
                    try {
                        Controlador.GestionBanco.modSaldoCuenta(this.s, cl, cv2.getNumCuenta(), cv2.getSaldo(), cv2.getPuntos());
                        Controlador.GestionBanco.modSaldoCuenta(this.s, this.c, cc.getNumCuenta(), cc.getSaldo(), cc.getPuntos());
                        Controlador.GestionBanco.guardarAccion(this.s, cl, cv2.getNumCuenta(), "TRANSFERENCIA", "+"+cantidad);
                        Controlador.GestionBanco.guardarAccion(this.s, this.c, cc.getNumCuenta(), "TRANSFERENCIA", "-"+cantidad);
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(this,"No se ha podido realizar la transferencia");
                    }
                }else if(tipo.equals("Fondo Inversión")){
                    fi2 = (FondoInversion) cl.buscarCuenta(Integer.parseInt(numC));
                    fi2.transferencia(cantidad);
                    cc.sacarDinero(cantidad);
                    try {
                        Controlador.GestionBanco.modSaldoCuenta(this.s, cl, fi2.getNumCuenta(), fi2.getSaldo(), fi2.getPuntos());
                        Controlador.GestionBanco.modSaldoCuenta(this.s, this.c, cc.getNumCuenta(), cc.getSaldo(), cc.getPuntos());
                        Controlador.GestionBanco.guardarAccion(this.s, cl, fi2.getNumCuenta(), "TRANSFERENCIA", "+"+cantidad);
                        Controlador.GestionBanco.guardarAccion(this.s, this.c, cc.getNumCuenta(), "TRANSFERENCIA", "-"+cantidad);
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(this,"No se ha podido realizar la transferencia");
                    }
                }
            }else if(this.c.buscarCuenta(this.nc) instanceof CuentaVivienda){
                cv = (CuentaVivienda) this.c.buscarCuenta(this.nc);
                cl = this.s.buscarCliente(this.jComboBox1.getSelectedItem().toString().split(" - ")[0]);
                String tipo = this.jTable1.getValueAt(row, 1).toString(),numC = this.jTable1.getValueAt(row, 0).toString();
                if(tipo.equals("Cuenta Corriente")){
                    cc2 = (CuentaCorriente) cl.buscarCuenta(Integer.parseInt(numC));
                    cc2.ingresarDinero(cantidad);
                    cv.sacarDinero(cantidad);
                    try {
                        Controlador.GestionBanco.modSaldoCuenta(this.s, cl, cc2.getNumCuenta(), cc2.getSaldo(), cc2.getPuntos());
                        Controlador.GestionBanco.modSaldoCuenta(this.s, this.c, cv.getNumCuenta(), cv.getSaldo(), cv.getPuntos());
                        Controlador.GestionBanco.guardarAccion(this.s, cl, cc2.getNumCuenta(), "TRANSFERENCIA", "+"+cantidad);
                        Controlador.GestionBanco.guardarAccion(this.s, this.c, cv.getNumCuenta(), "TRANSFERENCIA", "-"+cantidad);
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(this,"No se ha podido realizar la transferencia");
                    }
                }else if(tipo.equals("Cuenta Vivienda")){
                    cv2 = (CuentaVivienda) cl.buscarCuenta(Integer.parseInt(numC));
                    cv2.ingresarDinero(cantidad);
                    cv.sacarDinero(cantidad);
                    try {
                        Controlador.GestionBanco.modSaldoCuenta(this.s, cl, cv2.getNumCuenta(), cv2.getSaldo(), cv2.getPuntos());
                        Controlador.GestionBanco.modSaldoCuenta(this.s, this.c, cv.getNumCuenta(), cv.getSaldo(), cv.getPuntos());
                        Controlador.GestionBanco.guardarAccion(this.s, cl, cv2.getNumCuenta(), "TRANSFERENCIA", "+"+cantidad);
                        Controlador.GestionBanco.guardarAccion(this.s, this.c, cv.getNumCuenta(), "TRANSFERENCIA", "-"+cantidad);
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(this,"No se ha podido realizar la transferencia");
                    }
                }else if(tipo.equals("Fondo Inversión")){
                    fi2 = (FondoInversion) cl.buscarCuenta(Integer.parseInt(numC));
                    fi2.ingresarDinero(cantidad);
                    cv.sacarDinero(cantidad);
                    try {
                        Controlador.GestionBanco.modSaldoCuenta(this.s, cl, fi2.getNumCuenta(), fi2.getSaldo(), fi2.getPuntos());
                        Controlador.GestionBanco.modSaldoCuenta(this.s, this.c, cv.getNumCuenta(), cv.getSaldo(), cv.getPuntos());
                        Controlador.GestionBanco.guardarAccion(this.s, cl, fi2.getNumCuenta(), "TRANSFERENCIA", "+"+cantidad);
                        Controlador.GestionBanco.guardarAccion(this.s, this.c, cv.getNumCuenta(), "TRANSFERENCIA", "-"+cantidad);
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(this,"No se ha podido realizar la transferencia");
                    }
                }
            }else if(this.c.buscarCuenta(this.nc) instanceof FondoInversion){
                fi = (FondoInversion) this.c.buscarCuenta(this.nc);
                cl = this.s.buscarCliente(this.jComboBox1.getSelectedItem().toString().split(" - ")[0]);
                String tipo = this.jTable1.getValueAt(row, 1).toString(),numC = this.jTable1.getValueAt(row, 0).toString();
                if(tipo.equals("Cuenta Corriente")){
                    cc2 = (CuentaCorriente) cl.buscarCuenta(Integer.parseInt(numC));
                    cc2.ingresarDinero(cantidad);
                    fi.sacarDinero(cantidad);
                    try {
                        Controlador.GestionBanco.modSaldoCuenta(this.s, cl, cc2.getNumCuenta(), cc2.getSaldo(), cc2.getPuntos());
                        Controlador.GestionBanco.modSaldoCuenta(this.s, this.c, fi.getNumCuenta(), fi.getSaldo(), fi.getPuntos());
                        Controlador.GestionBanco.guardarAccion(this.s, cl, cc2.getNumCuenta(), "TRANSFERENCIA", "+"+cantidad);
                        Controlador.GestionBanco.guardarAccion(this.s, this.c, fi.getNumCuenta(), "TRANSFERENCIA", "-"+cantidad);
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(this,"No se ha podido realizar la transferencia");
                    }
                }else if(tipo.equals("Cuenta Vivienda")){
                    cv2 = (CuentaVivienda) cl.buscarCuenta(Integer.parseInt(numC));
                    cv2.ingresarDinero(cantidad);
                    fi.sacarDinero(cantidad);
                    try {
                        Controlador.GestionBanco.modSaldoCuenta(this.s, cl, cv2.getNumCuenta(), cv2.getSaldo(), cv2.getPuntos());
                        Controlador.GestionBanco.modSaldoCuenta(this.s, this.c, fi.getNumCuenta(), fi.getSaldo(), fi.getPuntos());
                        Controlador.GestionBanco.guardarAccion(this.s, cl, cv2.getNumCuenta(), "TRANSFERENCIA", "+"+cantidad);
                        Controlador.GestionBanco.guardarAccion(this.s, this.c, fi.getNumCuenta(), "TRANSFERENCIA", "-"+cantidad);
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(this,"No se ha podido realizar la transferencia");
                    }
                }else if(tipo.equals("Fondo Inversión")){
                    fi2 = (FondoInversion) cl.buscarCuenta(Integer.parseInt(numC));
                    fi2.ingresarDinero(cantidad);
                    fi.sacarDinero(cantidad);
                    try {
                        Controlador.GestionBanco.modSaldoCuenta(this.s, cl, fi2.getNumCuenta(), fi2.getSaldo(), fi2.getPuntos());
                        Controlador.GestionBanco.modSaldoCuenta(this.s, this.c, fi.getNumCuenta(), fi.getSaldo(), fi.getPuntos());
                        Controlador.GestionBanco.guardarAccion(this.s, cl, fi2.getNumCuenta(), "TRANSFERENCIA", "+"+cantidad);
                        Controlador.GestionBanco.guardarAccion(this.s, this.c, fi.getNumCuenta(), "TRANSFERENCIA", "-"+cantidad);
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(this,"No se ha podido realizar la transferencia");
                    }
                }
            }
            GestiónCuentas gc = new GestiónCuentas(this.s, this.c);
            gc.setLocation(500,0);
            gc.setVisible(true);
            this.dispose();
            }else{
                JOptionPane.showMessageDialog(this,"Introduce una cantidad");
            }
        }else{
            JOptionPane.showMessageDialog(this,"Debes seleccionar una cuenta");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    public void cargarClientes(){
        this.jComboBox1.removeAllItems();
        this.jComboBox1.addItem("- Selecciona cliente -");
        for(Cliente cl : this.s.getClientes()){
            if(!this.c.getDni().equals(cl.getDni())){
                this.jComboBox1.addItem(cl.getDni()+" - "+cl.getNom()+" "+cl.getAp());
            }
        }
    }
    
    public void plenarTaula(){
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Transferencia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Transferencia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Transferencia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Transferencia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Transferencia().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
